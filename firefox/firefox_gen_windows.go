// Code generated by 'go generate'; DO NOT EDIT.

package firefox

import (
	"syscall"
	"unsafe"

	"golang.org/x/sys/windows"
)

var _ unsafe.Pointer

// Do the interface allocations only once for common
// Errno values.
const (
	errnoERROR_IO_PENDING = 997
)

var (
	errERROR_IO_PENDING error = syscall.Errno(errnoERROR_IO_PENDING)
	errERROR_EINVAL     error = syscall.EINVAL
)

// errnoErr returns common boxed Errno values, to prevent
// allocations at runtime.
func errnoErr(e syscall.Errno) error {
	switch e {
	case 0:
		return errERROR_EINVAL
	case errnoERROR_IO_PENDING:
		return errERROR_IO_PENDING
	}
	// TODO: add more here, after collecting data on the common
	// error values see on Windows. (perhaps when running
	// all.bat?)
	return e
}

var (
	modiphlpapi = windows.NewLazySystemDLL("iphlpapi.dll")
	moduser32   = windows.NewLazySystemDLL("user32.dll")

	procGetTcpTable2             = modiphlpapi.NewProc("GetTcpTable2")
	procEnumWindows              = moduser32.NewProc("EnumWindows")
	procFindWindowW              = moduser32.NewProc("FindWindowW")
	procGetClassNameW            = moduser32.NewProc("GetClassNameW")
	procGetWindowThreadProcessId = moduser32.NewProc("GetWindowThreadProcessId")
)

func getTcpTable2(tcpTable *mibTCPTable2, sizePointer *uint32, order bool) (res syscall.Errno) {
	var _p0 uint32
	if order {
		_p0 = 1
	}
	r0, _, _ := syscall.Syscall(procGetTcpTable2.Addr(), 3, uintptr(unsafe.Pointer(tcpTable)), uintptr(unsafe.Pointer(sizePointer)), uintptr(_p0))
	res = syscall.Errno(r0)
	return
}

func enumWindows(lpEnumFunc uintptr, lParam uintptr) (ok bool) {
	r0, _, _ := syscall.Syscall(procEnumWindows.Addr(), 2, uintptr(lpEnumFunc), uintptr(lParam), 0)
	ok = r0 != 0
	return
}

func findWindow(className *uint16, windowName *uint16) (handle syscall.Handle, err error) {
	r0, _, e1 := syscall.Syscall(procFindWindowW.Addr(), 2, uintptr(unsafe.Pointer(className)), uintptr(unsafe.Pointer(windowName)), 0)
	handle = syscall.Handle(r0)
	if handle == 0 {
		err = errnoErr(e1)
	}
	return
}

func getClassName(handle syscall.Handle, className *uint16, classNameMax int32) (classNameLen int32, err error) {
	r0, _, e1 := syscall.Syscall(procGetClassNameW.Addr(), 3, uintptr(handle), uintptr(unsafe.Pointer(className)), uintptr(classNameMax))
	classNameLen = int32(r0)
	if classNameLen == 0 {
		err = errnoErr(e1)
	}
	return
}

func getWindowThreadProcessID(handle syscall.Handle, processID *uint32) (threadID uint32) {
	r0, _, _ := syscall.Syscall(procGetWindowThreadProcessId.Addr(), 2, uintptr(handle), uintptr(unsafe.Pointer(processID)), 0)
	threadID = uint32(r0)
	return
}
